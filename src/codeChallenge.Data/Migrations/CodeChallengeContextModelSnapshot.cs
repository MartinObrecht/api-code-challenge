// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using codeChallenge.Data;

#nullable disable

namespace codeChallenge.Data.Migrations
{
    [DbContext(typeof(CodeChallengeContext))]
    partial class CodeChallengeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("codeChallenge.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId")
                        .IsUnique();

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoverageAreaId")
                        .HasColumnType("int");

                    b.Property<double>("Latitute")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CoverageAreaId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.CoordinatesAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<double>("Latitute")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("CoordinatesAddress");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.CoverageArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId")
                        .IsUnique();

                    b.ToTable("CoverageArea", (string)null);
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Partner", (string)null);
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.Address", b =>
                {
                    b.HasOne("codeChallenge.Domain.Entities.Partner", "Partner")
                        .WithOne("Addres")
                        .HasForeignKey("codeChallenge.Domain.Entities.Address", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.Coordinates", b =>
                {
                    b.HasOne("codeChallenge.Domain.Entities.CoverageArea", "CoverageArea")
                        .WithMany("Coordinates")
                        .HasForeignKey("CoverageAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverageArea");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.CoordinatesAddress", b =>
                {
                    b.HasOne("codeChallenge.Domain.Entities.Address", "Address")
                        .WithMany("CoordinatesAddress")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.CoverageArea", b =>
                {
                    b.HasOne("codeChallenge.Domain.Entities.Partner", "Partner")
                        .WithOne("CoverageArea")
                        .HasForeignKey("codeChallenge.Domain.Entities.CoverageArea", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.Address", b =>
                {
                    b.Navigation("CoordinatesAddress");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.CoverageArea", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("codeChallenge.Domain.Entities.Partner", b =>
                {
                    b.Navigation("Addres")
                        .IsRequired();

                    b.Navigation("CoverageArea")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
